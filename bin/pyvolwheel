#!/usr/bin/env python
#
# pyvolwheel
# Copyright (C) 2010 epinull <epinull at gmail dot com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import os
import sys
import pyvolwheel
from pyvolwheel import config,mixer,gui,hotkeys

class Main(object):
    def on_hotkey_press(self, obj, key):
        if key in ['up', 'down']:
            self.change_volume(key)
        elif key == 'mute':
            self.toggle_mute()
        return True

    def run(self):
        gui.gtk.gdk.threads_init()
        self.config = config.Config()
        self.mixer = None
        self.icon = gui.TrayIcon(self)
        self.hkl = None
        self.reload()
        if self.config.restore.enabled is True:
            self.mixer.set_mute(self.config.restore.muted)
            self.mixer.set_volume(self.config.restore.level)
            self.icon.update()
        #kb = {'raise': "XF86AudioRaiseVolume",
        #      'lower': 'XF86AudioLowerVolume',
        #       'mute': 'XF86AudioMute'}
        #h = hotkeys.HotKeyListener(kb)
        #h.connect('key-press', self.on_hotkey_press)
        #h.start()
        gui.gtk.main()
        # Stop the hotkey listener, if it's active
        self._kill_hkl()
        if self.config.restore.enabled is True:
            self.config.restore.level = self.mixer.get_volume()[0]
            self.config.restore.muted = self.mixer.get_mute()
            self.config.save()

    def toggle_mute(self):
        if self.mixer is None: return
        try:
            self.mixer.set_mute(not self.mixer.get_mute())
        except mixer.MixerError:
            pass
        else:
            self.icon.update()

    def change_volume(self, direction):
        if self.mixer is None: return
        if direction == 'up':
            inc = self.config.mixer.increment
        elif direction == 'down':
            inc = -self.config.mixer.increment
        else:
            return
        try:
            self.mixer.change_volume(inc)
        except mixer.MixerError:
            pass
        else:
            self.icon.update()

    def _respawn_hkl(self):
        if self.hkl is not None:
            self._kill_hkl()
        binds = {  'up': self.config.hotkeys.up,
                 'down': self.config.hotkeys.down,
                 'mute': self.config.hotkeys.mute}
        # Start the hotkey listener
        self.hkl = hotkeys.HotKeyListener(binds)
        self.hkl.connect('key-press', self.on_hotkey_press)
        self.hkl.start()

    def _kill_hkl(self):
        if self.hkl is None:
            return
        self.hkl.stop()
        #self.hkl.join()
        self.hkl = None

    def reload(self):
        # Reload mixer etc to reflect any changes in self.config
        # If no driver is set, pick the first one available
        if self.config.mixer.driver is None:
            # Use the first driver returned by mixer.get_drivers()
            self.config.mixer.driver = mixer.get_drivers()[0]
            # Device & control are considered invalid
            self.config.mixer.device = None
            self.config.mixer.control = None
        # If no device is given, use the first one in the list
        if self.config.mixer.device is None:
            driver = self.config.mixer.driver
            self.config.mixer.device = mixer.get_devices(driver)[0]
        else:
            # Convert device to an int if possible (for ALSA card index)
            try:
                self.config.mixer.device = int(self.config.mixer.device)
            except ValueError:
                pass
        # If not control was given, use the first one in the control list
        if self.config.mixer.control is None:
            driver = self.config.mixer.driver
            device = self.config.mixer.device
            self.config.mixer.control = mixer.get_controls(driver, device)[0]
        # Close the current mixer, if one's open
        if self.mixer is not None:
            self.mixer.close()
            self.mixer = None
        # Open the new mixer
        self.mixer = mixer.open_mixer(self.config.mixer.driver,
                                      self.config.mixer.device,
                                      self.config.mixer.control)
        # Kill or respawn the hotkey listener
        if self.config.hotkeys.enabled is True:
            self._respawn_hkl()
        else:
            self._kill_hkl()
        # Make the tray icon reload
        self.icon.reload()

if __name__ == '__main__':
    if "-V" in sys.argv or "--version" in sys.argv:
        print "pyvolwheel",pyvolwheel.__version__
        sys.exit(0)
    elif "-h" in sys.argv or "--help" in sys.argv:
        print "Usage:","pyvolwheel"
        sys.exit(0)
    m = Main()
    m.run()

# vim: filetype=python:et:sw=4:ts=4:sts=4:tw=79
